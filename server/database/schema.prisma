datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = []
}

enum PeopleType {
    NATURAL_PERSON
    LEGAL_ENTITY

    @@map("people_type")
}

enum PeopleGender {
    MASCULINE
    FEMININE

    @@map("people_gender")
}

model People {
    id           Int           @id @default(autoincrement())
    type         PeopleType    @default(NATURAL_PERSON)
    name         String        @db.VarChar(128)
    itinCnpj     String        @unique @map("itin_cnpj") @db.VarChar(14)
    active       Boolean       @default(true)
    gender       PeopleGender?
    dateOfBirth  DateTime?     @map("date_of_birth") @db.Timestamptz(3)
    createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamptz(3)
    updatedAt    DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)
    users        User[]
    addresses    Address[]
    contacts     Contact[]
    bankAccounts BankAccount[]

    @@map("peoples")
}

enum ContactType {
    EMAIL
    TELEPHONE

    @@map("contect_type")
}

model Contact {
    id        Int         @id @default(autoincrement())
    peopleId  Int         @map("people_id")
    type      ContactType
    contact   String      @db.VarChar(254)
    createdAt DateTime    @default(now()) @map("created_at") @db.Timestamptz(3)
    updatedAt DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)
    people    People      @relation(fields: [peopleId], references: [id], onDelete: Cascade)

    @@map("contacts")
}

enum AddressType {
    COMMERCIAL
    RESIDENTIAL

    @@map("address_type")
}

model Address {
    id           Int         @id @default(autoincrement())
    peopleId     Int         @map("people_id")
    type         AddressType @default(RESIDENTIAL)
    street       String      @db.VarChar(60)
    number       String?     @db.VarChar(9)
    neighborhood String      @db.VarChar(56)
    country      String      @db.VarChar(56)
    city         String      @db.VarChar(60)
    state        String      @db.VarChar(60)
    zipCode      String      @map("zip_code") @db.VarChar(9)
    complement   String?     @default("")
    reference    String?     @default("")
    createdAt    DateTime    @default(now()) @map("created_at") @db.Timestamptz(3)
    updatedAt    DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)
    people       People      @relation(fields: [peopleId], references: [id], onDelete: Cascade)

    @@map("adresses")
}

enum UserType {
    CUSTOMER
    ADMIN

    @@map("user_type")
}

model User {
    id        Int      @id @default(autoincrement())
    peopleId  Int
    type      UserType
    active    Boolean  @default(true)
    code      String   @unique @db.VarChar(9)
    login     String   @db.VarChar(254)
    password  String   @db.VarChar(120)
    lastAcess DateTime @default(now()) @map("last_acess") @db.Timestamptz(3)
    createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
    updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)
    people    People   @relation(fields: [peopleId], references: [id], onDelete: Restrict)

    @@unique(name: "user_people_type", fields: [peopleId, type], map: "user_people_type")
    @@unique(name: "user_login_type", fields: [login, type], map: "user_login_type")
    @@map("users")
}

model BankAccount {
    id                    Int                    @id @default(autoincrement())
    peopleId              Int                    @map("people_id")
    code                  String                 @unique @db.VarChar(15)
    name                  String                 @db.VarChar(45)
    slug                  String                 @db.VarChar(45)
    password              String                 @map("password") @db.VarChar(120)
    balance               Int                    @default(0)
    active                Boolean                @default(true)
    createdAt             DateTime               @default(now()) @map("created_at") @db.Timestamptz(3)
    updatedAt             DateTime               @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)
    people                People                 @relation(fields: [peopleId], references: [id], onDelete: Restrict)
    financialTransactions FinancialTransaction[]
    categories            Category[]
    notifications         Notification[]

    @@unique(name: "bank_account_people_slug", fields: [peopleId, slug], map: "bank_account_people_slug")
    @@map("bank_accounts")
}

enum NotificationSituation {
    IN_QUEUE
    ERROR
    SENT

    @@map("notification_situation")
}

enum NotificationType {
    PUSH
    INTERNAL
    EMAIL

    @@map("notification_type")
}

model Notification {
    id            Int                   @id @default(autoincrement())
    bankAccountId Int?                  @map("bank_account_id")
    subject       String                @db.VarChar(45)
    body          String
    type          NotificationType      @map("type")
    situation     NotificationSituation @default(IN_QUEUE)
    sendAt        DateTime?             @map("send_at") @db.Timestamptz(3)
    createdAt     DateTime              @default(now()) @map("created_at") @db.Timestamptz(3)
    updatedAt     DateTime              @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)
    email         Email?
    bankAccount   BankAccount?          @relation(fields: [bankAccountId], references: [id], onDelete: Restrict)

    @@map("notifications")
}

model Email {
    id           Int          @id @default(autoincrement())
    recipient    String       @db.VarChar(45)
    sender       String       @db.VarChar(45)
    updatedAt    DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)
    notification Notification @relation(fields: [id], references: [id], onDelete: Cascade)

    @@map("emails")
}

model Category {
    id                    Int                            @id @default(autoincrement())
    bankAccountId         Int                            @map("bank_account_id")
    name                  String                         @db.VarChar(45)
    color                 String                         @db.VarChar(15)
    isFavorite            Boolean                        @default(false) @map("is_favorite")
    createdAt             DateTime                       @default(now()) @map("created_at") @db.Timestamptz(3)
    updatedAt             DateTime                       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)
    bankAccount           BankAccount                    @relation(fields: [bankAccountId], references: [id], onDelete: Restrict)
    financialTransactions FinancialTransactionCategory[]

    @@map("categories")
}

enum FinancialTransactionType {
    EXPENSE
    INCOME

    @@map("financial_transaction_type")
}

enum FinancialTransactionFrequency {
    DAILY
    WEEKLY
    MONTHLY
    QUARTERLY
    SEMIANNUALLY
    ANNUALLY

    @@map("financial_transaction_frequency")
}

enum FinancialTransactionTypeOccurrence {
    SINGLE
    PROGRAMMATIC

    @@map("financial_transaction_type_occurrence")
}

enum FinancialTransactionSituation {
    PENDING
    PAID_OUT
    PARTIALLY_PAID
    RECEIVED
    PARTIALLY_RECEIVED
    LATE
    CANCELED

    @@map("financial_transaction_situation")
}

model FinancialTransaction {
    id                       Int                                @id @default(autoincrement())
    bankAccountId            Int                                @map("bank_account_id")
    title                    String                             @db.VarChar(55)
    description              String                             @default("")
    value                    Int
    isObservable             Boolean                            @default(false) @map("is_observable")
    isSendNotification       Boolean                            @default(false) @map("is_send_notification")
    timesToRepeat            Int                                @default(0) @map("times_to_repeat")
    countRepeatedOccurrences Int                                @default(0) @map("count_repeated_occurrences")
    type                     FinancialTransactionType           @map("type")
    senderRecipient          String                             @map("sender_recipient")
    typeOccurrence           FinancialTransactionTypeOccurrence @default(SINGLE) @map("type_occurrence")
    frequency                FinancialTransactionFrequency?
    situation                FinancialTransactionSituation      @default(PENDING) @map("situation")
    expiresIn                DateTime?                          @map("expires_in") @db.Timestamptz(3)
    dateTimeCompetence       DateTime                           @default(now()) @map("date_time_competence") @db.Timestamptz(3)
    createdAt                DateTime                           @default(now()) @map("created_at") @db.Timestamptz(3)
    updatedAt                DateTime                           @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)
    bankAccount              BankAccount                        @relation(fields: [bankAccountId], references: [id], onDelete: Restrict)
    payments                 Payment[]
    notes                    FinancialTransactionNote[]
    categories               FinancialTransactionCategory[]
    attachments              FinancialTransactionAttachment[]

    @@map("financial_transactions")
}

model FinancialTransactionCategory {
    financialTransactionId Int                  @map("financial_transaction_id")
    categoryId             Int                  @map("category_id")
    createdAt              DateTime             @default(now()) @map("created_at") @db.Timestamptz(3)
    financialTransaction   FinancialTransaction @relation(fields: [financialTransactionId], references: [id], onDelete: Cascade)
    category               Category             @relation(fields: [categoryId], references: [id], onDelete: Cascade)

    @@id([financialTransactionId, categoryId])
    @@map("financial_transaction_categories")
}

model Note {
    id                   Int                       @id @default(autoincrement())
    description          String                    @default("")
    createdAt            DateTime                  @default(now()) @map("created_at") @db.Timestamptz(3)
    updatedAt            DateTime                  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)
    financialTransaction FinancialTransactionNote?

    @@map("notes")
}

model FinancialTransactionNote {
    id                     Int                  @id @default(autoincrement())
    financialTransactionId Int                  @map("financial_transaction_id")
    updatedAt              DateTime             @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)
    note                   Note                 @relation(fields: [id], references: [id], onDelete: Cascade)
    financialTransaction   FinancialTransaction @relation(fields: [financialTransactionId], references: [id], onDelete: Cascade)

    @@map("financial_transaction_notes")
}

model Payment {
    id                     Int                  @id @default(autoincrement())
    financialTransactionId Int                  @map("financial_transaction_id")
    valuePaid              Int                  @map("value_paid")
    discount               Int                  @default(0)
    increase               Int                  @default(0)
    observation            String               @default("")
    paidAt                 DateTime             @default(now()) @map("paid_at") @db.Timestamptz(3)
    createdAt              DateTime             @default(now()) @map("created_at") @db.Timestamptz(3)
    financialTransaction   FinancialTransaction @relation(fields: [financialTransactionId], references: [id], onDelete: Cascade)

    @@map("payments")
}

model File {
    id                   Int                             @id @default(autoincrement())
    filename_original    String                          @db.VarChar(255)
    filename_stored      String                          @db.VarChar(255)
    extension            String                          @db.VarChar(10)
    updatedAt            DateTime                        @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)
    createdAt            DateTime                        @default(now()) @map("created_at") @db.Timestamptz(3)
    financialTransaction FinancialTransactionAttachment?

    @@map("files")
}

model FinancialTransactionAttachment {
    id                     Int                  @id @default(autoincrement())
    updatedAt              DateTime             @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(3)
    financialTransactionId Int                  @map("financial_transaction_id")
    file                   File                 @relation(fields: [id], references: [id], onDelete: Cascade)
    financialTransaction   FinancialTransaction @relation(fields: [financialTransactionId], references: [id], onDelete: Cascade)

    @@map("financial_transaction_attachments")
}

model ErrorLog {
    id          Int      @id @default(autoincrement())
    operation   String
    message     String
    origin      String
    description String   @default("")
    stack       String   @default("")
    causes      Json[]   @default([])
    dateTime    DateTime @default(now()) @map("date_time") @db.Timestamptz(3)
    createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

    @@map("errors_log")
}

model ChangeLog {
    id        Int      @id @default(autoincrement())
    recordId  Int      @map("record_id")
    entity    String
    data      Json[]   @default([])
    dateTime  DateTime @default(now()) @map("date_time") @db.Timestamptz(3)
    createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

    @@map("changes_log")
}
