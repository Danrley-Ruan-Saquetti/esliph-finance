// DOCS: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// datasource db {
//   provider = "sqlite"
//   url      = "file:.src/resources/database/database.db"
//   output   = "./src/resources/database/client"
// }

generator client {
  provider = "prisma-client-js"
  output   = "../src/resources/database/client"
}

model User {
  id Int @id @default(autoincrement())
  name String @db.VarChar(45)
  email String @db.VarChar(25) @unique
  password String @db.VarChar(15)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  bankAccounts BankAccount[]

  @@map("user")
}

model BankAccount {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId Int @map("user_id")
  name String @db.VarChar(45)
  passwordMaster String @db.VarChar(15) @map("password_master")
  balance Decimal @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  financialTransactions FinancialTransaction[]
  categories Category[]
  notifications Notification[]

  @@map("bank_account")
}

enum NotificationType {
  Push
  Internal
  Mail

  @@map("notification_type")
}

model Notification {
  id Int @id @default(autoincrement())
  bankAccount BankAccount @relation(fields: [bankAccountId], references: [id])
  bankAccountId Int @map("bank_account_id")
  subject String @db.VarChar(45)
  content String
  wasRead Boolean @default(false) @map("was_read")
  type NotificationType @map("type")
  isSend Boolean @default(false) @map("is_send")
  sendAt DateTime @map("send_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  mail Mail?

  @@map("notification")
}

model Mail {
  id Int @id @default(autoincrement())
  notification Notification @relation(fields: [notificationId], references: [id])
  notificationId Int @map("notification_id") @unique
  recipient String @db.VarChar(45)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("mail")
}

model Category {
  id Int @id @default(autoincrement())
  bankAccount BankAccount @relation(fields: [bankAccountId], references: [id])
  bankAccountId Int @map("bank_account_id")
  name String @db.VarChar(45)
  color String @db.VarChar(15)
  isFavorite Boolean @default(false) @map("is_favorite")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("category")
}

enum FinancialTransactionType {
  EXPENSE
  INCOME

  @@map("financial_transaction_type")
}

enum FinancialTransactionOccurrence {
  SINGLE
  PROGRAMMATIC

  @@map("financial_transaction_occurrence")
}

enum FinancialTransactionSituation {
  PENDING
  PAID_OUT
  PARTIALLY_PAID
  RECEIVED
  PARTIALLY_RECEIVED
  LATE
  CANCELED

  @@map("financial_transaction_situation")
}

model FinancialTransaction {
  id Int @id @default(autoincrement())
  bankAccount BankAccount @relation(fields: [bankAccountId], references: [id])
  bankAccountId Int @map("bank_account_id")
  title String @db.VarChar(55)
  description String @default("")
  value Decimal
  priority Int
  isObservable Boolean @default(false) @map("is_observable")
  isSendNotification Boolean @default(false) @map("is_send_notification")
  timesToRepeat Int @default(0) @map("times_to_repeat")
  countRepeatedOccurrences Int @default(0) @map("count_repeated_occurrences")
  type FinancialTransactionType @map("type")
  receiver String @default("")
  sender String @default("")
  typeOccurrence FinancialTransactionOccurrence @default(SINGLE) @map("type_occurrence")
  situation FinancialTransactionSituation @default(PENDING) @map("situation")
  expiresIn DateTime @map("expires_in")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  payments Payment[]
  notes Note[]

  @@map("financial_transaction")
}

model Note {
  id Int @id @default(autoincrement())
  financialTransaction FinancialTransaction @relation(fields: [financialTransactionId], references: [id])
  financialTransactionId Int @map("financial_transaction_id")
  description String @default("")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("note")
}

model Payment {
  id Int @id @default(autoincrement())
  financialTransaction FinancialTransaction @relation(fields: [financialTransactionId], references: [id])
  financialTransactionId Int @map("financial_transaction_id")
  value Decimal
  discount Decimal @default(0)
  increase Decimal @default(0)
  paidAt DateTime @default(now()) @map("paid_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("payment")
}